rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Funzione per verificare se l'utente è autenticato
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Funzione per verificare se l'utente è il proprietario del documento
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Regole per la collezione 'symptoms'
    match /symptoms/{symptomId} {
      allow read: if isOwner(resource.data.userId);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isOwner(resource.data.userId);
    }
    
    // Regole per la collezione 'medications'
    match /medications/{medicationId} {
      allow read: if isOwner(resource.data.userId);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isOwner(resource.data.userId);
    }
    
    // Regole per la collezione 'wellness'
    match /wellness/{entryId} {
      allow read: if isOwner(resource.data.userId);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isOwner(resource.data.userId);
    }
    
    // Regole per la collezione 'reminders'
    match /reminders/{reminderId} {
      allow read: if isOwner(resource.data.userId);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isOwner(resource.data.userId);
    }
    
    // Regole per la collezione 'appointments'
    match /appointments/{appointmentId} {
      allow read: if isOwner(resource.data.userId);
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isOwner(resource.data.userId);
    }
  }
} 